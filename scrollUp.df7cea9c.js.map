{"version":3,"sources":["js/scrollUp.js"],"names":["target","document","querySelector","scrollToTopBtn","rootElement","documentElement","callback","entries","observer","forEach","entry","isIntersecting","classList","add","remove","scrollToTop","scrollTo","top","behavior","addEventListener","IntersectionObserver","observe"],"mappings":";AACA,IAAIA,EAASC,SAASC,cAAc,yBAGhCC,EAAiBF,SAASC,cAAc,aACxCE,EAAcH,SAASI,gBAG3B,SAASC,EAASC,EAASC,GAEzBD,EAAQE,QAAQ,SAAAC,GACVA,EAAMC,eAERR,EAAeS,UAAUC,IAAI,WAG7BV,EAAeS,UAAUE,OAAO,aAKtC,SAASC,IACPX,EAAYY,SAAS,CACnBC,IAAK,EACLC,SAAU,WAGdf,EAAegB,iBAAiB,QAASJ,GAIzC,IAAIP,EAAW,IAAIY,qBAAqBd,GAExCE,EAASa,QAAQrB","file":"scrollUp.df7cea9c.js","sourceRoot":"../src","sourcesContent":["// We select the element we want to target\nvar target = document.querySelector(\".section-registration\");\n\n\nvar scrollToTopBtn = document.querySelector(\".scrollup\")\nvar rootElement = document.documentElement\n\n// Next we want to create a function that will be called when that element is intersected\nfunction callback(entries, observer) {\n  // The callback will return an array of entries, even if you are only observing a single item\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      // Show button\n      scrollToTopBtn.classList.add(\"showBtn\")\n    } else {\n      // Hide button\n      scrollToTopBtn.classList.remove(\"showBtn\")\n    }\n  });\n}\n\nfunction scrollToTop() {\n  rootElement.scrollTo({\n    top: 0,\n    behavior: \"smooth\"\n  })\n}\nscrollToTopBtn.addEventListener(\"click\", scrollToTop);\n    \n// Next we instantiate the observer with the function we created above. This takes an optional configuration\n// object that we will use in the other examples.\nlet observer = new IntersectionObserver(callback);\n// Finally start observing the target element\nobserver.observe(target);"]}